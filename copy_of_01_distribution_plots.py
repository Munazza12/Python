# -*- coding: utf-8 -*-
"""Copy of 01-Distribution plots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/171l2l-gWV-FNq_o4_3mrHGDfk61Q0gBB

# Introduction to Seaborn
![alt text](https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/07/seaborn.png)

Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.

Important Features of Seaborn
Seaborn is built on top of Python’s core visualization library Matplotlib. It is meant to serve as a complement, and not a replacement. However, Seaborn comes with some very important features. Let us see a few of them here. The features help in −

* Built in themes for styling matplotlib graphics
* Visualizing univariate and bivariate data
* Fitting in and visualizing linear regression models
* Plotting statistical time series data
* Seaborn works well with NumPy and Pandas data structures
* It comes with built in themes for styling Matplotlib graphics

## **About iPython Notebooks**

iPython Notebooks are interactive coding environments embedded in a webpage. You will be using iPython notebooks in this class. You only need to write code between the ### START CODE HERE ### and ### END CODE HERE ### comments. After writing your code, you can run the cell by either pressing "SHIFT"+"ENTER" or by clicking on "Run Cell" (denoted by a play symbol) in the left bar of the cell.


**In this notebook you will learn -**
* Distribution plots
* Categorical plots
* Matrix plots
* Grids
* Regression plots
* Style and color

## Importing Seaborn

To import Seaborn in Colaboratory under the name **sns** type the following:
"""

import seaborn as sns

"""This dataset loads as Pandas DataFrame by default. If there is any function in the Pandas DataFrame, it works on this DataFrame.

Seaborn comes with built-in data sets.Here we will load the **tips** dataset.
"""

tips = sns.load_dataset('tips')

tips.head()

iris = sns.load_dataset('iris')

iris.head()

"""### **Exercise 1**
### **Loading A Built-in Seaborn Data Set**
To start working with a built-in Seaborn data set, you can make use of the** load_dataset()** function. To get an overview or inspect all data sets that this function opens up to you, go here. Check out the following example to see how the** load_dataset()** function works:
"""

# Import necessary libraries

# Load iris data


# Construct iris plot


# Show plot

"""### **Expected output:**
![alt text](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Seaborn+Tutorial/Figure3.png)

### **For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

## distplot

The distplot shows the distribution of a univariate set of observations.
"""

sns.distplot(tips['total_bill'])
# Safe to ignore warnings

"""To remove the kde layer and just have the histogram use:"""

sns.distplot(tips['total_bill'],kde=False,bins=30)

"""### **Kernel density estimation**
The kernel density estimate may be less familiar, but it can be a useful tool for plotting the shape of a distribution. Like the histogram, the KDE plots encode the density of observations on one axis with height along the other axis


### **Exercise 2:**
**Prepare is displot which displays only kde and not the histogram**
"""

#add code here
                                                 #just adjust the true or false

"""**For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **expected output:**

![alt text](https://seaborn.pydata.org/_images/distributions_12_0.png)

### **Exercise 3:**
**1. Create a list of random numbers**

**2.Prepare a distplot of it**
"""

#add code here
                                 #create a random list
                                 #plot it 
#end code here

"""### **For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **Exercise 4:**
**1.Create a series using panda series number**

**2. Give a name to the series**

**3. Prepare a distplot**

**4.Change the color from the default to red**
"""

#add code here
                                                    #create a list
                                                    #from that list create a series and give the series a name
                                                    #plot it and the give the color red
#end of code

"""### **For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

## jointplot

jointplot() allows you to basically match up two distplots for bivariate data. With your choice of what **kind** parameter to compare with: 
* “scatter” 
* “reg” 
* “resid” 
* “kde” 
* “hex”
"""

sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')

"""### **Exercies 5:**
Use resid kind
"""

# add code here

# end code here

"""### **For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **Exercise 6:**
Use kde kind
"""

#add code here

#end code here

"""### **For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **Exercise 7:**
Draw a scatterplot with marginal histograms:
"""

#add code here

#end code here

"""### **Expected Output**

![alt text](https://seaborn.pydata.org/_images/seaborn-jointplot-1.png)

### **For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **Exercise 8:**
Replace the scatterplots and histograms with density estimates and align the marginal Axes tightly with the joint Axes
"""

#add code here
                                  # load dataset
                                  #use jointplot having kind kde 

#end code here

"""**For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

**Expected output:**

![alt text](https://seaborn.pydata.org/_images/seaborn-jointplot-4.png)

### **Exercise 9:**

Draw a scatterplot, then add a joint density estimate
"""

#enter code here

#end code here

"""**For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

**Expected output:**

![alt text](https://seaborn.pydata.org/_images/seaborn-jointplot-5.png)

## pairplot

pairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns).
"""

sns.pairplot(tips)

"""### **Exercise 10:**
Prepare a pairplot using iris dataset
"""

#add code here

#end code here

"""**For solution**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX"""

sns.pairplot(tips,hue='sex',palette='coolwarm')

"""### **Exercise 11:**
Plot pairwise relationships across an entire dataframe (tips) and supports a color hue argument (for size).
"""

#add code here

#end code here

"""**For solution**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **Exercise 12:**
Plot pairwise relationships across an entire dataframe (iris) and supports a color hue argument (for species) using palette having different shades of blue.
"""

#add code here

#end code here

"""**For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### **Exercise 13:**
Prepair a plainplot and make use of hue , palette and marker of having dataset iris and hue species
"""

#add code here

#end code here

"""**For solutions:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

## rugplot

rugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:
"""

sns.rugplot(tips['total_bill'])

"""### **Exercise 14:**
**Prepare a rugplot for iris dataset of species**
"""

#add code here

#end code here

"""**For solution:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

## kdeplot

kdeplots are [Kernel Density Estimation plots](http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth). These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:
"""

# Don't worry about understanding this code!
# It's just for the diagram below
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

#Create dataset
dataset = np.random.randn(25)

# Create another rugplot
sns.rugplot(dataset);

# Set up the x-axis for the plot
x_min = dataset.min() - 2
x_max = dataset.max() + 2

# 100 equally spaced points from x_min to x_max
x_axis = np.linspace(x_min,x_max,100)

# Set up the bandwidth, for info on this:
url = 'http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth'

bandwidth = ((4*dataset.std()**5)/(3*len(dataset)))**.2


# Create an empty kernel list
kernel_list = []

# Plot each basis function
for data_point in dataset:
    
    # Create a kernel for each point and append to list
    kernel = stats.norm(data_point,bandwidth).pdf(x_axis)
    kernel_list.append(kernel)
    
    #Scale for plotting
    kernel = kernel / kernel.max()
    kernel = kernel * .4
    plt.plot(x_axis,kernel,color = 'grey',alpha=0.5)

plt.ylim(0,1)

# To get the kde plot we can sum these basis functions.

# Plot the sum of the basis function
sum_of_kde = np.sum(kernel_list,axis=0)

# Plot figure
fig = plt.plot(x_axis,sum_of_kde,color='indianred')

# Add the initial rugplot
sns.rugplot(dataset,c = 'indianred')

# Get rid of y-tick marks
plt.yticks([])

# Set title
plt.suptitle("Sum of the Basis Functions")

"""So with our tips dataset:"""

sns.kdeplot(tips['total_bill'])
sns.rugplot(tips['total_bill'])

sns.kdeplot(tips['tip'])
sns.rugplot(tips['tip'])

"""### **Exercise 15:**
Create a kdeplot for a random list
"""

#add code here

#end code here

"""**For solutions:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### Exercise 16:
1. Create a kdeplot for variables
"""

#add code here

#end code here

"""**For solutions:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### Exercise 17:
1. Prepare a kdeplot for two variables
2. Use colormap RdBu for changing the colour of the countour lines
3. Change the number of contour lines to 35
"""

#add code here

#end code here

"""**For solutions:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

### Exercise 18
1.Prepare a kdeplot for a random list

2.Change the bandwidth of the kdeplot
"""

#add code here

#end code here

"""**For solutions:**https://drive.google.com/open?id=1En6PsLqLCxs6dMhsX3q9h2_3w74mtpEX

# Great Job!
"""
# -*- coding: utf-8 -*-
"""Copy of 02-Categorical plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iC2WbXIuHk6rrxNfr3ibRvMpgKO_cnWc

# Introduction to Seaborn
![alt text](https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/07/seaborn.png)

Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.

Important Features of Seaborn
Seaborn is built on top of Python’s core visualization library Matplotlib. It is meant to serve as a complement, and not a replacement. However, Seaborn comes with some very important features. Let us see a few of them here. The features help in −

* Built in themes for styling matplotlib graphics
* Visualizing univariate and bivariate data
* Fitting in and visualizing linear regression models
* Plotting statistical time series data
* Seaborn works well with NumPy and Pandas data structures
* It comes with built in themes for styling Matplotlib graphics

## **About iPython Notebooks**

iPython Notebooks are interactive coding environments embedded in a webpage. You will be using iPython notebooks in this class. You only need to write code between the ### START CODE HERE ### and ### END CODE HERE ### comments. After writing your code, you can run the cell by either pressing "SHIFT"+"ENTER" or by clicking on "Run Cell" (denoted by a play symbol) in the left bar of the cell.


**In this notebook you will learn -**
* Distribution plots
* Categorical plots
* Matrix plots
* Grids
* Regression plots
* Style and color

## Importing Seaborn

To import Seaborn in Colaboratory under the name **sns** type the following:
"""

import seaborn as sns

tips = sns.load_dataset('tips')
tips.head()

"""## barplot and countplot

These very similar plots allow you to get aggregate data off a categorical feature in your data. **barplot** is a general plot that allows you to aggregate the categorical data based off some function, by default the mean:
"""

sns.barplot(x='sex',y='total_bill',data=tips)

"""### **Exercise 1**
**Prepare a barplot using two variables day and tip of dataset tips**
"""

#start code here
sns.barplot(x='   ',y='   ',data=   )
#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 2:
**1.Prepare a barplot having variable day and tip of dataset tips **

**2.Also add hue of value smoker**
"""

#start code here

#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 3:
**1. Prepaer a horizontal barplot**

**2. Also use a palette for presentation**
"""

#start code here
                            #for horizontal bar just interchange the value of x and y variable
#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti"""

import numpy as np

"""You can change the estimator object to your own function, that converts a vector to a scalar:"""

sns.barplot(x='sex',y='total_bill',data=tips,estimator=np.std)

"""### Exercise 4:
**Prepare a barplot having estimator as median **

*Hint : import median attribute from numpy*
"""

#add code here
                                        #import mdeian from numpy
                                        #add estimator as median
#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

## countplot

This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value:
"""

sns.countplot(x='sex',data=tips)

"""### Exercise 5:
**Prepare a count plot for variable size of dataset tips**
"""

#start code here

#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

## boxplot and violinplot

boxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be “outliers” using a method that is a function of the inter-quartile range.
"""

sns.boxplot(x="day", y="total_bill", data=tips,palette='rainbow')

# Can do entire dataframe with orient='h'
sns.boxplot(data=tips,palette='rainbow',orient='h')

sns.boxplot(x="day", y="total_bill", hue="smoker",data=tips, palette="coolwarm")

"""### Exercise 6:
**Construct a horizontal boxplot for a single variable namely size of dataset tips**
"""

#add code here
sns.boxplot(x=      )
#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 7:
**Construct a boxplot for two variable i.e. day v/s total_bill of dataset tips**
"""

#add code here
sns.boxplot(x="      ", y="      ",data=    )
#end code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 8
**Construct a boxplot for two variable and also pass a hue**
"""

sns.boxplot(x="   ", y="      ",data=      ,hue='        ')

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 9:
**Contruct a box plot for two variable and also use palette attribute**
"""

sns.boxplot(x="       ", y="    ",data=         ,hue='         ',palette='             ')

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

## violinplot
A violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.
"""

sns.violinplot(x="day", y="total_bill", data=tips,hue='sex',palette='Set1')

sns.violinplot(x="day", y="total_bill", data=tips,hue='sex',split=True,palette='Set1')

"""### Exercise 10:
**1.Prepare a violinplot have variables day and tip**

**2. Also pass hue and palette attribute **
"""

#add code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 11:
**1.Prepare a violinplot have variables sex and total_bill**

**2. Also pass hue and palette attribute **

**3.Also make use of split attribute**
"""

#add code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

## stripplot and swarmplot
The stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.

The swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don’t overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them).
"""

sns.stripplot(x="day", y="total_bill", data=tips)

sns.stripplot(x="day", y="total_bill", data=tips,jitter=True)

sns.stripplot(x="day", y="total_bill", data=tips,jitter=True,hue='sex',palette='Set1')

sns.stripplot(x="day", y="total_bill", data=tips,jitter=True,hue='sex',palette='Set1',split=True)

iris = sns.load_dataset('iris')
iris.head()

"""### Exercise 12:
**Construct a stripplot on the dataset iris and also pass attributes like jitter , hue , palette and split **
"""

#add code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti"""

sns.swarmplot(x="day", y="total_bill", data=tips)

sns.swarmplot(x="day", y="total_bill",hue='sex',data=tips, palette="Set1", split=True)

"""### Exercise 13
**Create a swarmplot of iris dataset and also pass attributes like hue,palette**
"""

#add code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

## Combining Categorical Plots
"""

sns.violinplot(x="tip", y="day", data=tips,palette='rainbow')
sns.swarmplot(x="tip", y="day", data=tips,color='black',size=3)

"""### Exercise 14:
**Combine barplot and swarmplot**
"""

#code for barplot
                                                                #code for swamplot

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 15:
**Combine boxplot and stripplot**
"""

#code for boxplot
                                                                #code for stripplot

"""**For solutions:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

## factorplot

factorplot is the most general form of a categorical plot. It can take in a **kind** parameter to adjust the plot type:
"""

sns.factorplot(x='sex',y='total_bill',data=tips,kind='bar')

"""### Exercise 16:
**1.Plot a factorplot for tip and total_bill data from the dataset tips**

**2. Also use hue and size attribute**
"""

#add code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 17:
**Plot a factorplot of kind violin**
"""

#add code here

"""**For solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

### Exercise 18
**Plot a factorplot of kind swarmplot**
"""

#add code here

"""**For Solution:**https://drive.google.com/open?id=1x9b2Fx_2PrZ7tKUMRmZK3kJvXXgdVSti

# Great Job!
"""